name: CD

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: "${{ secrets.DOCKERHUB_USERNAME }}"
        password: "${{ secrets.DOCKERHUB_TOKEN }}"

    - name: Build and push frontend Docker images
      uses: docker/build-push-action@v2
      with:
        context: ./frontend
        file: ./frontend/Dockerfile.prod
        push: true
        tags: rem0930/frontend:latest
        build-args: |
          NEXT_PUBLIC_GEOCODING_API_KEY=${{ secrets.NEXT_PUBLIC_GEOCODING_API_KEY }}
          NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}
          NEXT_PUBLIC_GOOGLE_MAPS_MAP_ID=${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_MAP_ID }}
          NEXT_PUBLIC_API_BASE_URL=${{ secrets.NEXT_PUBLIC_API_BASE_URL }}

    - name: Build and push backend Docker image
      uses: docker/build-push-action@v2
      with:
        context: ./backend
        file: ./backend/Dockerfile.prod
        push: true
        tags: rem0930/backend:latest

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.3 # バージョンを固定
      with:
        host: "${{ secrets.HOST }}"
        username: "${{ secrets.USERNAME }}"
        key: "${{ secrets.SSH_PRIVATE_KEY }}"
        script: |
          set -e

          cd /home/ec2-user/Swing
          git pull origin main

          cat <<EOF > docker-compose.yml
          version: '3.8'
          services:
            frontend:
              image: rem0930/frontend:latest
              ports:
                - '8000:8000'
              environment:
                - NODE_ENV=\${NODE_ENV}
              depends_on:
                - backend
              networks:
                - swing-net

            backend:
              image: rem0930/backend:latest
              expose:
                - '3000'
              environment:
                - AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
                - AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
                - AWS_REGION=${{ secrets.AWS_REGION }}
                - AWS_BUCKET=${{ secrets.AWS_BUCKET }}
                - RAILS_ENV=\${RAILS_ENV}
                - RAILS_MASTER_KEY=\${RAILS_MASTER_KEY}
                - MYSQL_USER=\${MYSQL_USER}
                - MYSQL_PASSWORD=\${MYSQL_PASSWORD}
                - MYSQL_HOST=\${MYSQL_HOST}
                - MYSQL_DATABASE=\${MYSQL_DATABASE}
                - MYSQL_PORT=\${MYSQL_PORT}
              depends_on:
                - db
                - redis
              networks:
                - swing-net

            nginx:
              image: nginx:latest
              volumes:
                - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
                - /etc/letsencrypt/live/swi-ng.com/fullchain.pem:/etc/nginx/ssl/fullchain.pem
                - /etc/letsencrypt/live/swi-ng.com/privkey.pem:/etc/nginx/ssl/privkey.pem
                - /etc/letsencrypt/options-ssl-nginx.conf:/etc/nginx/ssl/options-ssl-nginx.conf
                - /etc/letsencrypt/ssl-dhparams.pem:/etc/nginx/ssl/ssl-dhparams.pem
              ports:
                - '80:80'
                - '443:443'
              depends_on:
                - frontend
                - backend
              networks:
                - swing-net

            db:
              image: mysql:8.0
              expose:
                - '3306'
              volumes:
                - db-data:/var/lib/mysql
                - ./docker/db/my.cnf:/etc/mysql/conf.d/my.cnf
              environment:
                - MYSQL_ROOT_PASSWORD=\${MYSQL_ROOT_PASSWORD}
                - MYSQL_DATABASE=\${MYSQL_DATABASE}
                - MYSQL_USER=\${MYSQL_USER}
                - MYSQL_PASSWORD=\${MYSQL_PASSWORD}
              networks:
                - swing-net

            redis:
              image: redis:latest
              expose:
                - '6379'
              volumes:
                - redis-data:/data
              networks:
                - swing-net

          networks:
            swing-net:

          volumes:
            db-data:
            redis-data:
          EOF

          docker-compose pull
          docker-compose up -d --build
          docker image prune -af
        timeout: 1200s # タイムアウトを1200秒（20分）に設定
