name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    
    # 環境変数の追加
    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}

    services:
      redis:
        image: redis
      db:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_TEST_DATABASE }}

    steps:
    - uses: actions/checkout@v2

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.2

    - name: Set up environment variables
      run: |
        echo "RAILS_MASTER_KEY=${{ secrets.RAILS_MASTER_KEY }}" >> $GITHUB_ENV
        echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> $GITHUB_ENV
        echo "MYSQL_DATABASE=${{ secrets.MYSQL_TEST_DATABASE }}" >> $GITHUB_ENV
        echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> $GITHUB_ENV
        echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> $GITHUB_ENV
        echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_GEOCODING_API_KEY=${{ secrets.NEXT_PUBLIC_GEOCODING_API_KEY }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_GOOGLE_MAPS_MAP_ID=${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_MAP_ID }}" >> $GITHUB_ENV

    - name: Create .env file
      run: |
        touch .env
        echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
        echo "MYSQL_DATABASE=${{ secrets.MYSQL_TEST_DATABASE }}" >> .env
        echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
        echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
        echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" >> .env
        echo "RAILS_MASTER_KEY=${{ secrets.RAILS_MASTER_KEY }}" >> .env
        echo "NEXT_PUBLIC_API_BASE_URL=${{ secrets.NEXT_PUBLIC_API_BASE_URL }}" >> .env
        echo "NEXT_PUBLIC_GEOCODING_API_KEY=${{ secrets.NEXT_PUBLIC_GEOCODING_API_KEY }}" >> .env
        echo "NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}" >> .env
        echo "NEXT_PUBLIC_GOOGLE_MAPS_MAP_ID=${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_MAP_ID }}" >> .env

    - name: Cache Ruby gems
      uses: actions/cache@v2
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    - name: Install dependencies
      working-directory: ./backend
      run: |
        gem install bundler
        bundle install --jobs 4 --retry 3

    # Docker-compose ファイルとDockerfileの選択
    - name: Build Docker image
      run: |
        if [ "${{ env.ENVIRONMENT }}" = "production" ]; then
          docker-compose --env-file .env -f docker-compose.yml build
        else
          docker-compose --env-file .env -f docker-compose.dev.yml build
        fi

    - name: Set up database
      working-directory: ./backend
      run: |
        cp config/database.yml.ci config/database.yml
        if [ "${{ env.ENVIRONMENT }}" = "production" ]; then
          docker-compose -f ../docker-compose.yml run --rm -e RAILS_ENV=test --env-file ../.env backend rake db:create db:schema:load
        else
          docker-compose -f ../docker-compose.dev.yml run --rm -e RAILS_ENV=test --env-file ../.env backend rake db:create db:schema:load
        fi

    - name: Run RuboCop
      working-directory: ./backend
      run: |
        if [ "${{ env.ENVIRONMENT }}" = "production" ]; then
          docker-compose -f ../docker-compose.yml run --rm --env-file ../.env backend bundle exec rubocop
        else
          docker-compose -f ../docker-compose.dev.yml run --rm --env-file ../.env backend bundle exec rubocop
        fi

    - name: Run tests
      working-directory: ./backend
      run: |
        if [ "${{ env.ENVIRONMENT }}" = "production" ]; then
          docker-compose -f ../docker-compose.yml run --rm -e RAILS_ENV=test --env-file ../.env backend bundle exec rspec
        else
          docker-compose -f ../docker-compose.dev.yml run --rm -e RAILS_ENV=test --env-file ../.env backend bundle exec rspec
        fi

    - name: Clean up
      working-directory: ./backend
      run: |
        if [ "${{ env.ENVIRONMENT }}" = "production" ]; then
          docker-compose -f ../docker-compose.yml down --volumes
        else
          docker-compose -f ../docker-compose.dev.yml down --volumes
        fi
