name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:

  build:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_TEST_DATABASE }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
    - uses: actions/checkout@v2

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.2
        bundler-cache: true

    - name: Set up environment variables
      run: |
        echo "RAILS_ENV=test" >> $GITHUB_ENV
        echo "BUNDLE_WITHOUT=development" >> $GITHUB_ENV
        echo "RAILS_MASTER_KEY=${{ secrets.RAILS_MASTER_KEY }}" >> $GITHUB_ENV
        echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> $GITHUB_ENV
        echo "MYSQL_DATABASE=${{ secrets.MYSQL_TEST_DATABASE }}" >> $GITHUB_ENV
        echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> $GITHUB_ENV
        echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> $GITHUB_ENV
        echo "MYSQL_HOST=127.0.0.1" >> $GITHUB_ENV
        echo "MYSQL_PORT=3306" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_GEOCODING_API_KEY=${{ secrets.NEXT_PUBLIC_GEOCODING_API_KEY }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_GOOGLE_MAPS_MAP_ID=${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_MAP_ID }}" >> $GITHUB_ENV
        echo "LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:$LIBRARY_PATH" >> $GITHUB_ENV
        echo "CPATH=/usr/include/mysql:/usr/include:$CPATH" >> $GITHUB_ENV
    
    - name: Install MySQL client and development libraries
      run: |
        sudo apt-get update
        sudo apt-get install -y default-mysql-client libmysqlclient-dev
        sudo apt-get install -y libmysql++-dev
    
    - name: Debug MySQL configuration
      run: |
        echo "MySQL configuration:"
        mysql_config --cflags
        mysql_config --libs
        echo "MySQL include directory:"
        ls -l /usr/include/mysql || true

    - name: Install dependencies
      working-directory: ./backend
      run: |
        bundle config build.mysql2 --with-mysql-config=/usr/bin/mysql_config
        bundle config set --local deployment 'true'
        bundle install --jobs 4 --retry 3
        
    - name: Create .env file
      run: |
        touch .env
        echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
        echo "MYSQL_DATABASE=${{ secrets.MYSQL_TEST_DATABASE }}" >> .env
        echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
        echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
        echo "MYSQL_HOST=127.0.0.1" >> .env
        echo "MYSQL_PORT=3306" >> .env
        echo "RAILS_MASTER_KEY=${{ secrets.RAILS_MASTER_KEY }}" >> .env
        echo "NEXT_PUBLIC_API_BASE_URL=${{ secrets.NEXT_PUBLIC_API_BASE_URL }}" >> .env
        echo "NEXT_PUBLIC_GEOCODING_API_KEY=${{ secrets.NEXT_PUBLIC_GEOCODING_API_KEY }}" >> .env
        echo "NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}" >> .env
        echo "NEXT_PUBLIC_GOOGLE_MAPS_MAP_ID=${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_MAP_ID }}" >> .env
    
    - name: Install MySQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y default-mysql-client libmysqlclient-dev
    
    - name: Cache Ruby gems
      uses: actions/cache@v2
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    - name: Install dependencies
      working-directory: ./backend
      run: |
        bundle config build.mysql2 --with-mysql-dir=/usr/lib/x86_64-linux-gnu
        bundle config set --local deployment 'true'
        bundle install --jobs 4 --retry 3

    - name: Debug MySQL
      run: |
        echo "MySQL service status:"
        sudo service mysql status || true
        echo "MySQL processes:"
        ps aux | grep mysql || true
        echo "Listening ports:"
        sudo netstat -tlnp || true
    - name: Check MySQL service
      run: |
        sudo systemctl status mysql || true
        sudo netstat -tlnp | grep mysql || true
        sudo docker ps | grep mysql || true
    - name: Check MySQL connection info
      run: |
        echo "MYSQL_HOST: $MYSQL_HOST"
        echo "MYSQL_PORT: $MYSQL_PORT"
        echo "MYSQL_DATABASE: $MYSQL_DATABASE"
        echo "MYSQL_USER: $MYSQL_USER"
        cat config/database.yml || true

    - name: Set up database
      working-directory: ./backend
      run: |
        cp config/database.yml.ci config/database.yml
        bundle exec rake db:create db:schema:load

    - name: Debug database connection
      run: |
        echo "Attempting to connect to MySQL..."
        mysql -h127.0.0.1 -P3306 -uroot -p${{ secrets.MYSQL_ROOT_PASSWORD }} -e "SHOW DATABASES;"
        echo "Checking database.yml..."
        cat config/database.yml
        echo "Checking environment variables..."
        env | grep MYSQL

    - name: Run RuboCop
      working-directory: ./backend
      run: bundle exec rubocop

    - name: Run tests
      working-directory: ./backend
      run: bundle exec rspec

    - name: Clean up
      if: always()
      working-directory: ./backend
      run: |
        bundle exec rake db:drop RAILS_ENV=test || true